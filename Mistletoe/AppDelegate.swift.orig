//
//  AppDelegate.swift
//  Mistletoe
//
//  Created by Zach on 10/30/16.
//  Copyright Â© 2016 Zach. All rights reserved.
//

import UIKit
import FBSDKCoreKit
import FBSDKLoginKit
import CoreLocation
import Spring

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
	let locationManager = CLLocationManager()
	var window: UIWindow?
	
	func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
		return FBSDKApplicationDelegate.sharedInstance().application(app, open: url, options: options)
	}

	func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
		locationManager.delegate = self
		locationManager.desiredAccuracy = kCLLocationAccuracyBest
		locationManager.requestWhenInUseAuthorization()
		locationManager.startUpdatingLocation()
		return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions: launchOptions)
	}

	func applicationWillResignActive(_ application: UIApplication) {
		// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
		// Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
	}

	func applicationDidEnterBackground(_ application: UIApplication) {
		// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
		// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
	}

	func applicationWillEnterForeground(_ application: UIApplication) {
		// Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
	}

	func applicationDidBecomeActive(_ application: UIApplication) {
		// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
		
	}

	func applicationWillTerminate(_ application: UIApplication) {
		// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
	}
<<<<<<< HEAD
	
	func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
		print("Error: " + error.localizedDescription)
	}
	
	func locationManager(_ manager: CLLocationManager,
	                     didUpdateLocations locations: [CLLocation]) {
//		let currentCoordinates = locations[(locations.count - 1)].coordinate
//		let latitude = currentCoordinates.latitude
//		let longitude = currentCoordinates.longitude
//		print("Latitude = \(latitude) and Longitude = \(longitude)")
	}

    func showLogin() {
        let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
        let vc = mainStoryboard.instantiateViewController(withIdentifier: "Login") as UIViewController
        let springView = vc.view as! SpringView
        springView.animation = "fadeInDown"
        springView.curve = "linear"
        springView.duration = 1.5
        self.window?.rootViewController = vc;
        springView.animate()
    }
=======

    func handleEvent(forRegion region: CLRegion!) {
        print("Geofence triggered!")
    }
}
>>>>>>> ee227b6f24d869e61622a4696defbe0084dd3113

extension AppDelegate: CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {
        if region is CLCircularRegion {
            handleEvent(forRegion: region)
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {
        if region is CLCircularRegion {
            handleEvent(forRegion: region)
        }
    }
}

